# guides/models.py
from django.db import models
from django.utils.text import slugify
from django.conf import settings
from cloudinary.models import CloudinaryField

class Guide(models.Model):
    """
    Represents a guide with a title, cover image, description,
    and publication status. Slug is autogenerated for clean URLs.
    """
    title = models.CharField(max_length=200, help_text="Title of the guide.")
    slug = models.SlugField(max_length=200, unique=True, blank=True, help_text="URL-friendly unique identifier, autogenerated from the title.")
    order = models.PositiveIntegerField(help_text="Order of the guides.")
    description = models.TextField(blank=True, help_text="Detailed description or summary of the guide.")
    is_visible = models.BooleanField(default=False, help_text="Designates whether the guide is publicly visible.")
    cover = CloudinaryField('image', blank=True, null=True, help_text="Cover image representing the guide.")
    cover_prompt = models.TextField(blank=True, help_text="Optional prompt or description related to the cover image.")
    cover_alt = models.CharField(max_length=255, blank=True, help_text="Alternative text for the cover image.")
    cover_caption = models.CharField(max_length=255, blank=True, help_text="Caption or description for the cover image.")
    cover_source = models.CharField(max_length=255, blank=True, help_text="Source or credit for the cover image.")
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='guides_created', help_text="User who created this guide.")
    updated_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='guides_updated', help_text="User who last updated this guide.")
    created_at = models.DateTimeField(auto_now_add=True, help_text="Timestamp when the guide was created.")
    updated_at = models.DateTimeField(auto_now=True, help_text="Timestamp when the guide was last updated.")


    def save(self, *args, **kwargs):
        if self.pk:
            old = Guide.objects.filter(pk=self.pk).first()
            if old and old.title != self.title:
                base_slug = slugify(self.title)
                slug = base_slug
                num = 1
                while Guide.objects.filter(slug=slug).exclude(pk=self.pk).exists():
                    slug = f"{base_slug}-{num}"
                    num += 1
                self.slug = slug
        else:
            if not self.slug:
                base_slug = slugify(self.title)
                slug = base_slug
                num = 1
                while Guide.objects.filter(slug=slug).exists():
                    slug = f"{base_slug}-{num}"
                    num += 1
                self.slug = slug
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title
    
    class Meta:
        ordering = ['order']
        indexes = [
            models.Index(fields=['slug']),
            models.Index(fields=['is_visible']),
        ]

class Paragraph(models.Model):
    """
    Represents a paragraph belonging to a guide, with ordered content,
    optional illustration, and a prompt describing the image.
    """
    guide = models.ForeignKey(Guide, related_name='paragraphs', on_delete=models.CASCADE, help_text="Guide to which this paragraph belongs.")
    order = models.PositiveIntegerField(help_text="Order of the paragraph within the guide.")
    step_title = models.CharField(max_length=200, blank=True, help_text="Title for this step.")
    illustration = CloudinaryField('image', blank=True, null=True, help_text="Optional illustrative image related to this paragraph.") 
    illustration_prompt = models.TextField(blank=True, help_text="Optional prompt or description for the illustration.")
    illustration_alt = models.CharField(max_length=255, blank=True, help_text="Alternative text for the illustration.")
    illustration_caption = models.CharField(max_length=255, blank=True, help_text="Caption or description for the illustration.")
    illustration_source = models.CharField(max_length=255, blank=True, help_text="Source or credit for the illustration.")
    content = models.TextField(help_text="Text content of the paragraph.")
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='paragraphs_created')
    updated_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='paragraphs_updated')
    created_at = models.DateTimeField(auto_now_add=True, help_text="Timestamp when the paragraph was created.")
    updated_at = models.DateTimeField(auto_now=True, help_text="Timestamp when the paragraph was last updated.")
    

    class Meta:
        ordering = ['order']
        unique_together = ('guide', 'order')
        verbose_name = "Paragraph"
        verbose_name_plural = "Paragraphs"

    def __str__(self):
        return f"Paragraph {self.order} of {self.guide.title}"